특정 위치에 있는 데이터를 반환한다
- Object get(int index) : O(n)
배열은 인덱스로 원하는 데이터를 즉시 찾을 수 있으므로 O(1)의 빠른 성능을 보장한다
하지만 연결 리스트에서 사용하는 노드들은 다음 노드에 대한 참조값만 있을 뿐이다.
그러므로 인덱스로 원하는 위치의 데이터를 찾기 위해선 인덱스 숫자만큼 반복해서 찾아야 한다

마지막에 데이터를 추가한다
- void add(Object e) : O(n)
마지막에 새로운 요소를 추가하는건 O(1)이지만 마지막 노드를 찾는데 O(n)이 소요된다.

특정 위치에 있는 데이터를 찾아서 변경하고 기존 값을 반환하다
- Object set(int index, Object element) : O(n)
특정 위치의 노드를 찾는데 O(n)이 걸린다

데이터를 검색하고, 검색된 위치를 반환하다
- int indexOf(Object o) : O(n)
모든 노드를 순회하면서 equals()를 사용해서 같은 데이터가 있는지 찾아야 한다

---
연결 리스트를 통해 데이터를 추가하는 방식은 꼭 필요한 메모리만 사용하므로 배열 리스트의 단점인
메모리 낭비를 해결 할 수 있다
(연결을 위한 추가 메모리(next 정보 저장)가 사용되는 단점 존재)


배열 리스트는 중간에 데이터를 추가하거나 삭제할 때 기존 데이터를 한 칸씩 이동해야 하는 문제가 있었으나
연결 리스트의 경우에는

데이터 추가
첫번째에 추가하는 경우:
배열 리스트는 모든 데이터를 오른쪽으로 하나씩 밀어야 하지만
연결 리스트는 새로 생성한 노드의 참조값만 변경하면 된다
-> O(1)
중간에 추가하는 경우 :
배열 리스트는 인덱스 위치부터 모든 데이터를 오른쪽으로 하나씩 밀어야 하지만
연결 리스트는 인덱스를 사용해서 노드를 추가할 위치를 찾고 O(n) 새로운 노드를 추가한다 O(1)
-> O(n)

데이터 삭제
첫번째 데이터를 삭제하는 경우:
배열 리스트의 경우 모든 데이터를 왼쪽으로 하나씩 밀어야 하지만
연결 리스트는 첫번째 노드의 참조값만 변경하면 된다
-> O(1)
중간 데이터를 삭제하는 경우:
배열 리스트의 경우 인덱스 위치까지 모든 데이터를 왼쪽으로 하나씩 밀어야 하지만
연결 리스트는 인덱스로 삭제할 항목을 찾아서 O(n) 삭제한다 O(1)
-> O(n)

배열 리스트 Vs 연결 리스트
데이터를 조회할 일이 많고 뒷 부분에 데이터를 추가한다면 배열 리스트가 보통 더 좋은 성능
앞쪽에 데이터를 추가하거나 삭제할 일이 많다면 연결 리스트가 보통 더 좋은 성능
